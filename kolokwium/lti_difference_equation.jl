# problem 12
# średnia sygnału          
function rozwiazanie12(;
    b::Vector{Float64} = [0.007565859165903106, -0.002964141329207259, 0.0069809764063194215, 0.006980976406319421, -0.0029641413292072604, 0.007565859165903106],
    a::Vector{Float64} = [1.0, -3.2777960554763252, 4.5105514453523154, -3.20299624965813, 1.1669195812770186, -0.17351333300884755],
    x::Vector{Float64} = [-0.16, 0.8, 0.92, 0.18, -0.43, 0.99, 0.46, 0.8, -0.38, 0.46, -0.38, -0.49, 0.42, -0.58, -0.7, 0.41, -0.92, 0.84, -0.57, 0.89, 0.04, 0.33, 0.29, -0.83, 0.35, -0.03, 0.74],
    L::Int = 77,
)
    N = length(x)
    M = length(b)
    K = length(a)
    y = zeros(Float64, L)

    for n in 1:L
        for m in 1:M
            if((n - m + 1) > 0 && (n - m + 1) <= N)
                y[n] += b[m] * x[n - m + 1]
            end
        end
        for k in 2:K
            if((n - k + 1) > 0 && n - k + 1 <= L)
                y[n] -= a[k] * y[n - k + 1]
            end
        end
    end

    mean = sum(y) / length(y)
    return mean
end

# 0.0448068128414413
rozwiazanie12()

# problem 23
# wartość skuteczna sygnału          
function rozwiazanie23(;
    b::Vector{Float64} = [0.0025850641842372754, 0.015510385105423652, 0.03877596276355913, 0.05170128368474551, 0.03877596276355913, 0.015510385105423652, 0.0025850641842372754],
    a::Vector{Float64} = [1.0, -2.379721044554775, 2.9104065678646873, -2.055131436773098, 0.8779238976340888, -0.2098654503596897, 0.02183157397997185],
    x::Vector{Float64} = [0.78, 0.55, 0.15, 0.99, 0.99, 0.24, 0.63, 0.73, -0.78, 0.08, 0.65, -0.98, 0.81, -0.64, -0.84, -0.75, 0.94, -0.04, -0.2, 0.66, -0.21, -0.98],
    L::Int = 43,
)
    N = length(x)
    M = length(b)
    K = length(a)
    y = zeros(Float64, L)

    for n in 1:L
        for m in 1:M
            if((n - m + 1) > 0 && (n - m + 1) <= N)
                y[n] += b[m] * x[n - m + 1]
            end
        end
        for k in 2:K
            if((n - k + 1) > 0 && (n - k + 1) <= L)
                y[n] -= a[k] * y[n - k + 1]
            end
        end
    end

    rms = sqrt(sum(abs.(y) .^ 2) / length(y))
    return rms
end

# 0.2908694539833204
rozwiazanie23()

# problem 34
# moc sygnału          
function rozwiazanie34(;
    b::Vector{Float64} = [0.4419376000325761, -1.558586615714086, 3.1443562142337984, -3.818929149200471, 3.144356214233798, -1.5585866157140862, 0.4419376000325761],
    a::Vector{Float64} = [1.0, -2.6146370671909045, 3.7694389019755006, -3.4513490882169577, 2.2090568436223847, -0.8701162252207815, 0.1940918829348649],
    x::Vector{Float64} = [-0.62, -0.64, 0.03, 0.49, 0.44, -0.06, 0.33, -0.11, -0.39, -0.24, 0.2, 0.93, 0.54, -0.97, 0.22, -0.85, 0.64, -0.69, -0.36, 0.63, -0.01, 0.68, -0.68, -0.87, -0.47, -0.59, -0.95, 0.57, 0.75, 0.22, 0.14, -0.56, -0.09],
    L::Int = 43,
)
    N = length(x)
    M = length(b)
    K = length(a)
    y = zeros(Float64, L)

    for n in 1:L
        for m in 1:M
            if((n - m + 1) > 0 && (n - m + 1) <= N)
                y[n] += b[m] * x[n - m + 1]
            end
        end
        for k in 2:K
            if((n - k + 1) > 0 && (n - k + 1) <= L)
                y[n] -= a[k] * y[n - k + 1]
            end
        end
    end

    power = sum(abs.(y) .^ 2) / length(y)
    return power
end

# 0.13157219368214537
rozwiazanie34()

# problem 51
# energia sygnału          
function rozwiazanie51(;
    b::Vector{Float64} = [0.13765452052178545, -0.8259271231307127, 2.0648178078267816, -2.753090410435709, 2.0648178078267816, -0.8259271231307127, 0.13765452052178545],
    a::Vector{Float64} = [1.0, -2.2602004426555764, 2.699835625087775, -1.8632667209677467, 0.7832025354037867, -0.18442602402918318, 0.018957965250203487],
    x::Vector{Float64} = [-1.0, 0.24, -0.82, 0.75, 0.85, 0.32, -0.39, 0.52, 0.49, 0.02, -0.01, -0.77, 0.86, -0.12, -0.31, 0.28, -0.17, 0.86, -0.2, 0.32],
    L::Int = 31,
)
    N = length(x)
    M = length(b)
    K = length(a)
    y = zeros(Float64, L)

    for n in 1:L
        for m in 1:M
            if((n - m + 1) > 0 && (n - m + 1) <= N)
                y[n] += b[m] * x[n - m + 1]
            end
        end
        for k in 2:K
            if((n - k + 1) > 0 && (n - k + 1) <= L)
                y[n] -= a[k] * y[n - k + 1]
            end
        end
    end
    energy = sum(abs.(y) .^ 2)
    return energy
end

# 4.964239705749917
rozwiazanie51()

# problem 52
# energia sygnału          
function rozwiazanie52(;
    b::Vector{Float64} = [0.2860349839875222, -1.4072263983896438, 3.7403513880225163, -6.350473163087442, 7.563206382127592, -6.3504731630874405, 3.7403513880225154, -1.4072263983896436, 0.2860349839875221],
    a::Vector{Float64} = [1.0, -3.7055535172065373, 7.365014864472611, -9.784104450598761, 9.536587675832035, -6.913757048058372, 3.8024010102028436, -1.5126687651160444, 0.35415326122131824],
    x::Vector{Float64} = [0.88, -0.17, -0.59, 0.24, 0.45, 0.24, 0.72, 0.61, 0.18, 0.25, 0.09, -0.13, -0.25, 0.65, -0.05, -0.1, -0.51, 0.3, 0.03, -0.86],
    L::Int = 38,
)
    N = length(x)
    M = length(b)
    K = length(a)
    y = zeros(Float64, L)

    for n in 1:L
        for m in 1:M
            if((n - m + 1) > 0 && (n - m + 1) <= N)
                y[n] += b[m] * x[n - m + 1]
            end
        end
        for k in 2:K
            if((n - k + 1) > 0 && (n - k + 1) <= L)
                y[n] -= a[k] * y[n - k + 1]
            end
        end
    end
    energy = sum(abs.(y) .^ 2)
    return energy
end

# 2.4552059372704895
rozwiazanie52()



# energia sygnału
function rozwiazanie4(;
    b::Vector{Float64} = [0.15220776723622292, -0.6306612471456423, 1.1561685097078895, -1.1561685097078895, 0.6306612471456425, -0.15220776723622292],
    a::Vector{Float64} = [1.0, -1.1397725742429585, 1.51371415095299, -0.3171939570028648, 0.16876931161974204, 0.2613749456390448],
    x::Vector{Float64} = [-0.12, -0.57, -0.18, -0.44, -0.71, -0.46, -0.38, 0.9, 0.43, 0.28, -0.41, 0.73, -0.7, -0.24, -0.63, -0.06, -0.85, 0.07, 0.76, -0.37, 0.99, 0.21, 0.26, -0.16, -0.01, -0.66, 0.48],
    L::Int = 54,
)
    N = length(x)
    M = length(b)
    K = length(a)
    y = zeros(Float64, L)

    for n in 1:L
        for m in 1:M
            if((n - m + 1) > 0 && (n - m + 1) <= N)
                y[n] += b[m] * x[n - m + 1]
            end
        end
        for k in 2:K
            if((n - k + 1) > 0 && (n - k + 1) <= L)
                y[n] -= a[k] * y[n - k + 1]
            end
        end
    end
    energy = sum(abs.(y) .^ 2)
    return energy
end

# 3.3525141321526473
rozwiazanie4()

# problem 22
# energia sygnału          
function rozwiazanie22(;
    b::Vector{Float64} = [0.0001824576217927976, 0.0, -0.0007298304871711904, 0.0, 0.0010947457307567856, 0.0, -0.0007298304871711904, 0.0, 0.0001824576217927976],
    a::Vector{Float64} = [1.0, -4.3462771138252085, 10.723355668678993, -17.10139259989802, 19.577251856850896, -15.985988924574716, 9.369620185372915, -3.5484690027943397, 0.7635949896497858],
    x::Vector{Float64} = [-0.85, -0.9, 0.15, 0.24, 0.54, -0.55, 0.35, 0.23, 0.58, 0.26, 0.72, 0.54, 0.25, 0.18, 0.65, -0.27, 0.96, -0.05, 0.26, 0.08, 0.75, -0.66, 0.68, 0.6, 0.82, -0.78, 0.85, -0.05, 0.25, -0.98, -0.82, 0.97, 0.08, -0.56, 0.2, -0.62, 0.13, 0.96, 0.28, 0.79, -0.92, -0.28, 0.13, -0.96, -0.11, -0.79, 0.24, 0.59, 0.29],
    L::Int = 68,
)
    N = length(x)
    M = length(b)
    K = length(a)
    y = zeros(Float64, L)

    for n in 1:L
        for m in 1:M
            if((n - m + 1) > 0 && (n - m + 1) <= N)
                y[n] += b[m] * x[n - m + 1]
            end
        end
        for k in 2:K
            if((n - k + 1) > 0 && (n - k + 1) <= L)
                y[n] -= a[k] * y[n - k + 1]
            end
        end
    end
    energy = sum(abs.(y) .^ 2)
    return energy
end

# 1.0937103555074714
rozwiazanie22()

# problem 35
# moc sygnału           
function rozwiazanie35(;
    b::Vector{Float64} = [0.005886216155083775, 0.0, -0.017658648465251326, 0.0, 0.017658648465251326, 0.0, -0.005886216155083775],
    a::Vector{Float64} = [1.0, -2.8390104753828656, 4.8984221995853146, -5.0962271628207905, 3.7271905661816733, -1.637353111316897, 0.43922072794642975],
    x::Vector{Float64} = [0.65, 0.72, 0.8, 0.58, -0.31, -0.92, -0.9, 0.21, 0.87, -0.52, -0.51, -0.37, 0.66, -0.29, -0.09, 0.44, -0.94, -0.25, -0.95, 0.15, -0.74, 0.28, -0.95, -0.99, 0.33, 0.42, -0.89, 0.89, -0.03],
    L::Int = 50,
)
    N = length(x)
    M = length(b)
    K = length(a)
    y = zeros(Float64, L)

    for n in 1:L
        for m in 1:M
            if((n - m + 1) > 0 && (n - m + 1) <= N)
                y[n] += b[m] * x[n - m + 1]
            end
        end
        for k in 2:K
            if((n - k + 1) > 0 && (n - k + 1) <= L)
                y[n] -= a[k] * y[n - k + 1]
            end
        end
    end
    power = sum(abs.(y) .^ 2) / length(y)
    return power
end

# 0.048019120995258915  
rozwiazanie35()

# problem 38
# wartość skuteczna          
function rozwiazanie38(;
    b::Vector{Float64} = [0.011890894483662125, -0.011867140186896332, 0.027609342283054873, -0.015918060605606424, 0.027609342283054873, -0.011867140186896332, 0.011890894483662122],
    a::Vector{Float64} = [1.0, -4.115304360359421, 8.164479569209309, -9.585714441959897, 6.985982993740504, -2.9916441988456772, 0.5977811527585505],
    x::Vector{Float64} = [0.08, -0.28, -0.62, 0.71, 0.87, 0.2, -0.98, -0.91, -0.13, -0.76, 0.88, 0.84, 0.25, 0.47, -0.99, -0.6, -0.35, -0.38, -0.01, -0.65, 0.05, 0.52, -0.78],
    L::Int = 40,
)
    N = length(x)
    M = length(b)
    K = length(a)
    y = zeros(Float64, L)

    for n in 1:L
        for m in 1:M
            if((n - m + 1) > 0 && (n - m + 1) <= N)
                y[n] += b[m] * x[n - m + 1]
            end
        end
        for k in 2:K
            if((n - k + 1) > 0 && (n - k + 1) <= L)
                y[n] -= a[k] * y[n - k + 1]
            end
        end
    end
    rms = sqrt(sum(abs.(y) .^ 2) / length(y))
    return rms
end

# 0.2441484844180199
rozwiazanie38()

# problem 59
# wartość skuteczna           
function rozwiazanie59(;
    b::Vector{Float64} = [0.5697113391879268, -3.250657215695663, 10.267592693373901, -21.46893144083625, 32.78492171829188, -37.53906825761523, 32.78492171829189, -21.46893144083625, 10.267592693373901, -3.2506572156956626, 0.5697113391879266],
    a::Vector{Float64} = [1.0, -5.068608469554383, 14.19202148337911, -26.37389188361491, 35.86216926073992, -36.65858175312293, 28.641101749714185, -16.81841424031455, 7.2245880063854955, -2.058749224072284, 0.32457100148871776],
    x::Vector{Float64} = [0.61, -0.87, -0.47, -0.42, -0.09, 0.87, 0.95, 0.75, 0.63, -0.14, -0.61, 0.24, 0.85, 0.8, 0.32, 0.14, 0.35, 0.99, 0.63],
    L::Int = 55,
)
    N = length(x)
    M = length(b)
    K = length(a)
    y = zeros(Float64, L)

    for n in 1:L
        for m in 1:M
            if((n - m + 1) > 0 && (n - m + 1) <= N)
                y[n] += b[m] * x[n - m + 1]
            end
        end
        for k in 2:K
            if((n - k + 1) > 0 && (n - k + 1) <= L)
                y[n] -= a[k] * y[n - k + 1]
            end
        end
    end
    rms = sqrt(sum(abs.(y) .^ 2) / length(y))
    return rms
end

# 0.31609935421148966
rozwiazanie59()

# problem 83
# moc sygnału          
function rozwiazanie83(;
    b::Vector{Float64} = [0.4502459803463013, -3.3159134256014844, 12.800325198551652, -32.85570786053933, 61.78676481661911, -88.951336129986, 100.24244837863881, -88.95133612998602, 61.78676481661912, -32.85570786053934, 12.800325198551654, -3.3159134256014844, 0.4502459803463013],
    a::Vector{Float64} = [1.0, -6.493802318349136, 22.079413867010267, -50.10480710110084, 83.67169483588289, -107.51680505930148, 108.76881149517737, -87.2330360058761, 55.210830496153505, -27.023446447346085, 9.814678874415318, -2.408637623492223, 0.3149989138594487],
    x::Vector{Float64} = [0.44, -0.98, -0.13, 0.4, 0.92, 0.29, -0.05, 0.47, 1.0, 0.55, -0.9, -0.12, 0.55, -0.46, -0.3, -0.95, 0.18, 0.29, -0.64, 0.4, 0.87, 0.18, 0.21, -0.31, 0.64, 0.12, -0.78, -0.36, -0.87, 0.19, 0.94, -0.42, -0.03, 0.84, 0.12, -0.95, 0.58, 0.22, -0.01, 0.48, 0.88, -0.71, 0.46, -0.72, -0.78, -0.21, -0.04],
    L::Int = 72,
)
    N = length(x)
    M = length(b)
    K = length(a)
    y = zeros(Float64, L)

    for n in 1:L
        for m in 1:M
            if((n - m + 1) > 0 && (n - m + 1) <= N)
                y[n] += b[m] * x[n - m + 1]
            end
        end
        for k in 2:K
            if((n - k + 1) > 0 && (n - k + 1) <= L)
                y[n] -= a[k] * y[n - k + 1]
            end
        end
    end
    power = sum(abs.(y) .^ 2) / length(y)
    return power
end

# 0.18047824471873336
rozwiazanie83()