quantize(L::AbstractVector)::Function = x -> L[argmin(abs.(x .- L))]
energy(x::AbstractVector)::Real = sum(abs.(x) .^ 2)
power(x::AbstractVector)::Real = sum(abs.(x) .^ 2) / length(x)
rms(x::AbstractVector)::Real = sqrt(sum(abs.(x) .^ 2) / length(x))

# problem 2
# energia sygnału błędu kwantyzacji
function rozwiazanie2(;
    a::Float64 = -0.86,
    b::Float64 = 1.9,
    x::Vector{Float64} = [1.904, 1.85369, 1.80338, 1.75307, 1.70276, 1.65245, 1.60214, 1.55183, 1.50152, 1.4512, 1.40089, 1.35058, 1.30027, 1.24996, 1.19965, 1.14934, 1.09903, 1.04872, 0.99841, 0.9481, 0.89779, 0.84748, 0.79717, 0.74686, 0.69655, 0.64624, 0.59593, 0.54561, 0.4953, 0.44499, 0.39468, 0.34437, 0.29406, 0.24375, 0.19344, 0.14313, 0.09282, 0.04251, -0.0078, -0.05811, -0.10842, -0.15873, -0.20904, -0.25935, -0.30966, -0.35998, -0.41029, -0.4606, -0.51091, -0.56122, -0.61153, -0.66184, -0.71215, -0.76246, -0.81277, -0.86308],
)
    quantize(L) = x -> L[argmin(abs.(x .- L))]
    N = 8
    L = range(start = a, stop = b, length = 2 ^ N)

    q = quantize(L)
    x_q = q.(x)
    e = x - x_q
    
    energy = sum(abs.(e) .^ 2)
    return energy
end

# 0.0005527368564013786
rozwiazanie2()

# problem 5
# moc sygnału błędu kwantyzacji
function rozwiazanie5(;
    a::Float64 = -1.8,
    b::Float64 = -0.7,
    x::Vector{Float64} = [-0.95249, -0.93229, -0.9067, -0.8895, -0.87555, -0.85029, -0.8252, -0.81458, -0.79834, -0.76341, -0.74406, -0.75505, -0.71527, -1.78174, -1.6715, -1.63665, -1.63797, -1.6205, -1.58786, -1.56999, -1.55878, -1.53492, -1.50956, -1.49477, -1.47799, -1.45289, -1.43215, -1.41732, -1.39668, -1.3726, -1.35497, -1.33838, -1.31541, -1.29361, -1.27749, -1.25832, -1.23467, -1.21556, -1.19928, -1.17752, -1.15483, -1.13799, -1.12006, -1.0965, -1.07607, -1.06039, -1.03973, -1.0158, -0.99839, -0.98217, -0.95838, -0.93601, -0.92165, -0.90273, -0.87615, -0.85783, -0.84582, -0.82103, -0.79271, -0.78345, -0.77255, -0.72953, -0.69845, -1.009, -1.65916, -1.68134, -1.64381, -1.61209, -1.60441, -1.58885, -1.55944, -1.5393, -1.52701, -1.50512, -1.47973, -1.46346, -1.44731, -1.42317, -1.40151, -1.38622, -1.36657, -1.34251, -1.32397, -1.30773, -1.28547, -1.26305, -1.2465, -1.2281, -1.20456],
)
    quantize(L) = x -> L[argmin(abs.(x .- L))]
    N = 6
    L = range(start = a, stop = b, length = 2 ^ N)

    q = quantize(L)
    x_q = q.(x)
    e = x .- x_q
    power = sum((abs.(e) .^ 2) / length(e))
    return power
end

# 2.394851425740504e-5
rozwiazanie5()

# problem 6
# moc sygnału błędu kwantyzacji
function rozwiazanie6(;
    a::Float64 = -0.67,
    b::Float64 = 0.28,
    x::Vector{Float64} = [0.03, -0.03279, -0.09557, -0.15836, -0.22115, -0.28394, -0.34672, -0.40951, -0.4723, -0.53508, -0.59787, -0.66066, 0.27655, 0.21377, 0.15098, 0.08819, 0.02541, -0.03738, -0.10017, -0.16296, -0.22574, -0.28853, -0.35132, -0.4141, -0.47689, -0.53968, -0.60247, -0.66525, 0.27196, 0.20917, 0.14639, 0.0836, 0.02081, -0.04198, -0.10476, -0.16755, -0.23034, -0.29312, -0.35591, -0.4187, -0.48149, -0.54427, -0.60706, -0.66985, 0.26737, 0.20458, 0.14179, 0.079, 0.01622, -0.04657, -0.10936, -0.17214, -0.23493, -0.29772, -0.36051, -0.42329, -0.48608, -0.54887, -0.61165, -0.67444, 0.26277, 0.19998],
)
    quantize(L) = x -> L[argmin(abs.(x .- L))]
    N = 8
    L = range(start = a, stop = b, length = 2 ^ N)

    q = quantize(L)
    x_q = q.(x)
    e = x .- x_q
    power = sum((abs.(e) .^ 2) / length(e))
    return power
end

# 1.4608983660130698e-6
rozwiazanie6()

# problem 16
# wartość skuteczna sygnału błędu kwantyzacji
function rozwiazanie16(;
    a::Float64 = -1.8,
    b::Float64 = 0.96,
    x::Vector{Float64} = [-0.176, -0.55802, -0.94003, -1.32205, -1.70406, -1.51392, -1.13191, -0.74989, -0.36788, 0.01414, 0.39616, 0.77817, 0.83981, 0.4578, 0.07578, -0.30623, -0.68825, -1.07026, -1.45228, -1.76571, -1.38369, -1.00167, -0.61966, -0.23764, 0.14437, 0.52639, 0.9084, 0.70958, 0.32757, -0.05445, -0.43647, -0.81848, -1.2005, -1.58251, -1.63547, -1.25346, -0.87144, -0.48943, -0.10741, 0.2746, 0.65662, 0.96136, 0.57935, 0.19733, -0.18468, -0.5667, -0.94871, -1.33073, -1.71274, -1.50524, -1.12322, -0.74121, -0.35919, 0.02282, 0.40484, 0.78685, 0.83113, 0.44912, 0.0671, -0.31491, -0.69693, -1.07895, -1.46096, -1.75702, -1.37501, -0.99299, -0.61098, -0.22896, 0.15305, 0.53507, 0.91709, 0.7009, 0.31888, -0.06313, -0.44515, -0.82716, -1.20918, -1.59119, -1.62679, -1.24478, -0.86276, -0.48074],
)
    quantize(L) = x -> L[argmin(abs.(x .- L))]
    N = 5
    L = range(start = a, stop = b, length = 2 ^ N)

    q = quantize(L)
    x_q = q.(x)
    e = x .- x_q
    rms = sqrt(sum(abs.(e) .^ 2) / length(e))
    return rms
end

# 0.02571913456967636
rozwiazanie16()

# problem 17
# moc sygnału błędu kwantyzacji
function rozwiazanie17(;
    a::Float64 = 1.9,
    b::Float64 = 2.5,
    x::Vector{Float64} = [2.416, 2.36717, 2.31835, 2.26952, 2.22069, 2.17187, 2.12304, 2.07422, 2.02539, 1.97656, 1.92774, 1.92109, 1.96992, 2.01874, 2.06757, 2.11639, 2.16522, 2.21405, 2.26287, 2.3117, 2.36053, 2.40935, 2.45818, 2.493, 2.44417, 2.39534, 2.34652, 2.29769, 2.24886, 2.20004, 2.15121, 2.10238, 2.05356, 2.00473, 1.95591, 1.90708, 1.94175, 1.99057, 2.0394, 2.08823, 2.13705, 2.18588, 2.2347, 2.28353, 2.33236, 2.38118, 2.43001, 2.47884, 2.47234, 2.42351, 2.37469, 2.32586, 2.27703, 2.22821, 2.17938, 2.13055, 2.08173, 2.0329, 1.98408, 1.93525, 1.91358, 1.9624, 2.01123, 2.06006, 2.10888, 2.15771, 2.20654, 2.25536, 2.30419, 2.35301, 2.40184, 2.45067, 2.49949, 2.45168, 2.40285, 2.35403, 2.3052, 2.25638, 2.20755, 2.15872, 2.1099, 2.06107, 2.01224, 1.96342, 1.91459, 1.93423, 1.98306, 2.03189, 2.08071, 2.12954, 2.17837, 2.22719, 2.27602, 2.32485, 2.37367, 2.4225],
)
    quantize(L) = x -> L[argmin(abs.(x .- L))]
    N = 10
    L = range(start = a, stop = b, length = 2 ^ N)

    q = quantize(L)
    x_q = q.(x)
    e = x .- x_q
    power = sum(abs.(e) .^ 2) / length(e)
    return power
end

# 2.794472137178679e-8
rozwiazanie17()

# problem 22
# moc sygnału błędu kwantyzacji
function rozwiazanie22(;
    a::Float64 = -0.4,
    b::Float64 = 4.8,
    x::Vector{Float64} = [-0.4, -0.0858, 0.2284, 0.5426, 0.8568, 1.171, 1.4852, 1.7994, 2.1136, 2.42779, 2.74199, 3.05619, 3.37039, 3.68459, 3.99879, 4.31299, 4.62719, -0.25861, 0.05559, 0.36979, 0.68399, 0.99819, 1.31239, 1.62659, 1.94079, 2.25498, 2.56918, 2.88338, 3.19758, 3.51178, 3.82598, 4.14018, 4.45438, 4.76858, -0.11722, 0.19698, 0.51118, 0.82538, 1.13958, 1.45378, 1.76798, 2.08218, 2.39637, 2.71057, 3.02477, 3.33897, 3.65317, 3.96737, 4.28157, 4.59577, -0.29003, 0.02417, 0.33837, 0.65257, 0.96677, 1.28097, 1.59517, 1.90937, 2.22356, 2.53776, 2.85196, 3.16616, 3.48036, 3.79456, 4.10876, 4.42296, 4.73716, -0.14864, 0.16556, 0.47976, 0.79396, 1.10816, 1.42236, 1.73656, 2.05076, 2.36495],
)
    quantize(L) = x -> L[argmin(abs.(x .- L))]
    N = 3
    L = range(start = a, stop = b, length = 2 ^ N)

    q = quantize(L)
    x_q = q.(x)
    e = x .- x_q
    power = sum(abs.(e) .^ 2) / length(e)
    return power
end

# 0.045765219407223404
rozwiazanie22()

# problem 47
# energia sygnału błędu kwantyzacji  
function rozwiazanie47(;
    a::Float64 = -6.7,
    b::Float64 = 3.4,
    x::Vector{Float64} = [-5.85607, -5.46519, -5.10337, -4.75532, -4.4161, -4.08325, -3.75498, -3.4297, -3.1059, -2.78214, -2.45709, -2.12967, -1.79907, -1.4648, -1.12678, -0.78529, -0.44097, -0.09478, 0.25209, 0.59828, 0.94236, 1.2829, 1.61845, 1.94745, 2.26781, 2.57551, 2.85886, 3.05947, -0.54603, -5.82278, -5.62567, -5.34813, -5.04794, -4.7362, -4.41627, -4.08956, -3.75697, -3.4194, -3.07785, -2.7335, -2.38764, -2.04158, -1.69661, -1.35384, -1.01415, -0.67811, -0.34592, -0.01741, 0.30796, 0.63109, 0.95316, 1.27555, 1.59986, 1.92787, 2.26184, 2.60554, 2.96917, 3.41341, -6.71216, -6.17888, -5.7842, -5.41367, -5.0506, -4.69173, -4.3366, -3.98549, -3.63878, -3.29672, -2.95926, -2.62605, -2.29641, -1.9694, -1.64388, -1.3186, -0.9923, -0.66381, -0.33217, 0.00331, 0.34299],
)
    quantize(L) = x -> L[argmin(abs.(x .- L))]
    N = 3
    L = range(start = a, stop = b, length = 2 ^ N)

    q = quantize(L)
    x_q = q.(x)
    e = x .- x_q
    energy = sum(abs.(e) .^ 2)
    return energy
end

# 13.629894145679595
rozwiazanie47()



# wartość skuteczna sygnału błędu kwantyzacji          
function rozwiazanie3(;
    a::Float64 = -2.4,
    b::Float64 = 4.9,
    x::Vector{Float64} = [-1.84, -1.3681, -0.89621, -0.42431, 0.04758, 0.51948, 0.99137, 1.46327, 1.93516, 2.40706, 2.87895, 3.35085, 3.82275, 4.29464, 4.76654, 4.76157, 4.28967, 3.81778, 3.34588, 2.87399, 2.40209, 1.9302, 1.4583, 0.98641, 0.51451, 0.04261, -0.42928, -0.90118, -1.37307, -1.84497, -2.31686, -2.41124, -1.93935, -1.46745, -0.99556, -0.52366, -0.05176, 0.42013, 0.89203, 1.36392, 1.83582, 2.30771, 2.77961, 3.2515, 3.7234, 4.19529, 4.66719, 4.86092, 4.38902, 3.91712, 3.44523, 2.97333],
)
    quantize(L) = x -> L[argmin(abs.(x .- L))]
    N = 5
    L = range(start = a, stop = b, length = 2 ^ N)

    q = quantize(L)
    x_q = q.(x)
    e = x - x_q
    rms = sqrt(sum(abs.(e) .^ 2) / length(e))
    return rms
end

# 0.07288866395547805
rozwiazanie3()