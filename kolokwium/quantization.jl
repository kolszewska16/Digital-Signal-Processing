quantize(L::AbstractVector)::Function = x -> L[argmin(abs.(x .- L))]
energy(x::AbstractVector)::Real = sum(abs.(x) .^ 2)
power(x::AbstractVector)::Real = sum(abs.(x) .^ 2) / length(x)
rms(x::AbstractVector)::Real = sqrt(sum(abs.(x) .^ 2) / length(x))

# problem 2
# energia sygnału błędu kwantyzacji
function rozwiazanie2(;
    a::Float64 = -0.86,
    b::Float64 = 1.9,
    x::Vector{Float64} = [1.904, 1.85369, 1.80338, 1.75307, 1.70276, 1.65245, 1.60214, 1.55183, 1.50152, 1.4512, 1.40089, 1.35058, 1.30027, 1.24996, 1.19965, 1.14934, 1.09903, 1.04872, 0.99841, 0.9481, 0.89779, 0.84748, 0.79717, 0.74686, 0.69655, 0.64624, 0.59593, 0.54561, 0.4953, 0.44499, 0.39468, 0.34437, 0.29406, 0.24375, 0.19344, 0.14313, 0.09282, 0.04251, -0.0078, -0.05811, -0.10842, -0.15873, -0.20904, -0.25935, -0.30966, -0.35998, -0.41029, -0.4606, -0.51091, -0.56122, -0.61153, -0.66184, -0.71215, -0.76246, -0.81277, -0.86308],
)
    quantize(L) = x -> L[argmin(abs.(x .- L))]
    N = 8
    L = range(start = a, stop = b, length = 2 ^ N)

    q = quantize(L)
    x_q = q.(x)
    e = x - x_q
    
    energy = sum(abs.(e) .^ 2)
    return energy
end

# 0.0005527368564013786
rozwiazanie2()

# problem 5
# moc sygnału błędu kwantyzacji
function rozwiazanie5(;
    a::Float64 = -1.8,
    b::Float64 = -0.7,
    x::Vector{Float64} = [-0.95249, -0.93229, -0.9067, -0.8895, -0.87555, -0.85029, -0.8252, -0.81458, -0.79834, -0.76341, -0.74406, -0.75505, -0.71527, -1.78174, -1.6715, -1.63665, -1.63797, -1.6205, -1.58786, -1.56999, -1.55878, -1.53492, -1.50956, -1.49477, -1.47799, -1.45289, -1.43215, -1.41732, -1.39668, -1.3726, -1.35497, -1.33838, -1.31541, -1.29361, -1.27749, -1.25832, -1.23467, -1.21556, -1.19928, -1.17752, -1.15483, -1.13799, -1.12006, -1.0965, -1.07607, -1.06039, -1.03973, -1.0158, -0.99839, -0.98217, -0.95838, -0.93601, -0.92165, -0.90273, -0.87615, -0.85783, -0.84582, -0.82103, -0.79271, -0.78345, -0.77255, -0.72953, -0.69845, -1.009, -1.65916, -1.68134, -1.64381, -1.61209, -1.60441, -1.58885, -1.55944, -1.5393, -1.52701, -1.50512, -1.47973, -1.46346, -1.44731, -1.42317, -1.40151, -1.38622, -1.36657, -1.34251, -1.32397, -1.30773, -1.28547, -1.26305, -1.2465, -1.2281, -1.20456],
)
    quantize(L) = x -> L[argmin(abs.(x .- L))]
    N = 6
    L = range(start = a, stop = b, length = 2 ^ N)

    q = quantize(L)
    x_q = q.(x)
    e = x .- x_q
    power = sum((abs.(e) .^ 2) / length(e))
    return power
end

# 2.394851425740504e-5
rozwiazanie5()

# problem 6
# moc sygnału błędu kwantyzacji
function rozwiazanie6(;
    a::Float64 = -0.67,
    b::Float64 = 0.28,
    x::Vector{Float64} = [0.03, -0.03279, -0.09557, -0.15836, -0.22115, -0.28394, -0.34672, -0.40951, -0.4723, -0.53508, -0.59787, -0.66066, 0.27655, 0.21377, 0.15098, 0.08819, 0.02541, -0.03738, -0.10017, -0.16296, -0.22574, -0.28853, -0.35132, -0.4141, -0.47689, -0.53968, -0.60247, -0.66525, 0.27196, 0.20917, 0.14639, 0.0836, 0.02081, -0.04198, -0.10476, -0.16755, -0.23034, -0.29312, -0.35591, -0.4187, -0.48149, -0.54427, -0.60706, -0.66985, 0.26737, 0.20458, 0.14179, 0.079, 0.01622, -0.04657, -0.10936, -0.17214, -0.23493, -0.29772, -0.36051, -0.42329, -0.48608, -0.54887, -0.61165, -0.67444, 0.26277, 0.19998],
)
    quantize(L) = x -> L[argmin(abs.(x .- L))]
    N = 8
    L = range(start = a, stop = b, length = 2 ^ N)

    q = quantize(L)
    x_q = q.(x)
    e = x .- x_q
    power = sum((abs.(e) .^ 2) / length(e))
    return power
end

# 1.4608983660130698e-6
rozwiazanie6()

# problem 16
# wartość skuteczna sygnału błędu kwantyzacji
function rozwiazanie16(;
    a::Float64 = -1.8,
    b::Float64 = 0.96,
    x::Vector{Float64} = [-0.176, -0.55802, -0.94003, -1.32205, -1.70406, -1.51392, -1.13191, -0.74989, -0.36788, 0.01414, 0.39616, 0.77817, 0.83981, 0.4578, 0.07578, -0.30623, -0.68825, -1.07026, -1.45228, -1.76571, -1.38369, -1.00167, -0.61966, -0.23764, 0.14437, 0.52639, 0.9084, 0.70958, 0.32757, -0.05445, -0.43647, -0.81848, -1.2005, -1.58251, -1.63547, -1.25346, -0.87144, -0.48943, -0.10741, 0.2746, 0.65662, 0.96136, 0.57935, 0.19733, -0.18468, -0.5667, -0.94871, -1.33073, -1.71274, -1.50524, -1.12322, -0.74121, -0.35919, 0.02282, 0.40484, 0.78685, 0.83113, 0.44912, 0.0671, -0.31491, -0.69693, -1.07895, -1.46096, -1.75702, -1.37501, -0.99299, -0.61098, -0.22896, 0.15305, 0.53507, 0.91709, 0.7009, 0.31888, -0.06313, -0.44515, -0.82716, -1.20918, -1.59119, -1.62679, -1.24478, -0.86276, -0.48074],
)
    quantize(L) = x -> L[argmin(abs.(x .- L))]
    N = 5
    L = range(start = a, stop = b, length = 2 ^ N)

    q = quantize(L)
    x_q = q.(x)
    e = x .- x_q
    rms = sqrt(sum(abs.(e) .^ 2) / length(e))
    return rms
end

# 0.02571913456967636
rozwiazanie16()

# problem 17
# moc sygnału błędu kwantyzacji
function rozwiazanie17(;
    a::Float64 = 1.9,
    b::Float64 = 2.5,
    x::Vector{Float64} = [2.416, 2.36717, 2.31835, 2.26952, 2.22069, 2.17187, 2.12304, 2.07422, 2.02539, 1.97656, 1.92774, 1.92109, 1.96992, 2.01874, 2.06757, 2.11639, 2.16522, 2.21405, 2.26287, 2.3117, 2.36053, 2.40935, 2.45818, 2.493, 2.44417, 2.39534, 2.34652, 2.29769, 2.24886, 2.20004, 2.15121, 2.10238, 2.05356, 2.00473, 1.95591, 1.90708, 1.94175, 1.99057, 2.0394, 2.08823, 2.13705, 2.18588, 2.2347, 2.28353, 2.33236, 2.38118, 2.43001, 2.47884, 2.47234, 2.42351, 2.37469, 2.32586, 2.27703, 2.22821, 2.17938, 2.13055, 2.08173, 2.0329, 1.98408, 1.93525, 1.91358, 1.9624, 2.01123, 2.06006, 2.10888, 2.15771, 2.20654, 2.25536, 2.30419, 2.35301, 2.40184, 2.45067, 2.49949, 2.45168, 2.40285, 2.35403, 2.3052, 2.25638, 2.20755, 2.15872, 2.1099, 2.06107, 2.01224, 1.96342, 1.91459, 1.93423, 1.98306, 2.03189, 2.08071, 2.12954, 2.17837, 2.22719, 2.27602, 2.32485, 2.37367, 2.4225],
)
    quantize(L) = x -> L[argmin(abs.(x .- L))]
    N = 10
    L = range(start = a, stop = b, length = 2 ^ N)

    q = quantize(L)
    x_q = q.(x)
    e = x .- x_q
    power = sum(abs.(e) .^ 2) / length(e)
    return power
end

# 2.794472137178679e-8
rozwiazanie17()

# problem 22
# moc sygnału błędu kwantyzacji
function rozwiazanie22(;
    a::Float64 = -0.4,
    b::Float64 = 4.8,
    x::Vector{Float64} = [-0.4, -0.0858, 0.2284, 0.5426, 0.8568, 1.171, 1.4852, 1.7994, 2.1136, 2.42779, 2.74199, 3.05619, 3.37039, 3.68459, 3.99879, 4.31299, 4.62719, -0.25861, 0.05559, 0.36979, 0.68399, 0.99819, 1.31239, 1.62659, 1.94079, 2.25498, 2.56918, 2.88338, 3.19758, 3.51178, 3.82598, 4.14018, 4.45438, 4.76858, -0.11722, 0.19698, 0.51118, 0.82538, 1.13958, 1.45378, 1.76798, 2.08218, 2.39637, 2.71057, 3.02477, 3.33897, 3.65317, 3.96737, 4.28157, 4.59577, -0.29003, 0.02417, 0.33837, 0.65257, 0.96677, 1.28097, 1.59517, 1.90937, 2.22356, 2.53776, 2.85196, 3.16616, 3.48036, 3.79456, 4.10876, 4.42296, 4.73716, -0.14864, 0.16556, 0.47976, 0.79396, 1.10816, 1.42236, 1.73656, 2.05076, 2.36495],
)
    quantize(L) = x -> L[argmin(abs.(x .- L))]
    N = 3
    L = range(start = a, stop = b, length = 2 ^ N)

    q = quantize(L)
    x_q = q.(x)
    e = x .- x_q
    power = sum(abs.(e) .^ 2) / length(e)
    return power
end

# 0.045765219407223404
rozwiazanie22()

# problem 47
# energia sygnału błędu kwantyzacji  
function rozwiazanie47(;
    a::Float64 = -6.7,
    b::Float64 = 3.4,
    x::Vector{Float64} = [-5.85607, -5.46519, -5.10337, -4.75532, -4.4161, -4.08325, -3.75498, -3.4297, -3.1059, -2.78214, -2.45709, -2.12967, -1.79907, -1.4648, -1.12678, -0.78529, -0.44097, -0.09478, 0.25209, 0.59828, 0.94236, 1.2829, 1.61845, 1.94745, 2.26781, 2.57551, 2.85886, 3.05947, -0.54603, -5.82278, -5.62567, -5.34813, -5.04794, -4.7362, -4.41627, -4.08956, -3.75697, -3.4194, -3.07785, -2.7335, -2.38764, -2.04158, -1.69661, -1.35384, -1.01415, -0.67811, -0.34592, -0.01741, 0.30796, 0.63109, 0.95316, 1.27555, 1.59986, 1.92787, 2.26184, 2.60554, 2.96917, 3.41341, -6.71216, -6.17888, -5.7842, -5.41367, -5.0506, -4.69173, -4.3366, -3.98549, -3.63878, -3.29672, -2.95926, -2.62605, -2.29641, -1.9694, -1.64388, -1.3186, -0.9923, -0.66381, -0.33217, 0.00331, 0.34299],
)
    quantize(L) = x -> L[argmin(abs.(x .- L))]
    N = 3
    L = range(start = a, stop = b, length = 2 ^ N)

    q = quantize(L)
    x_q = q.(x)
    e = x .- x_q
    energy = sum(abs.(e) .^ 2)
    return energy
end

# 13.629894145679595
rozwiazanie47()



# problem 3
# wartość skuteczna sygnału błędu kwantyzacji          
function rozwiazanie3(;
    a::Float64 = -2.4,
    b::Float64 = 4.9,
    x::Vector{Float64} = [-1.84, -1.3681, -0.89621, -0.42431, 0.04758, 0.51948, 0.99137, 1.46327, 1.93516, 2.40706, 2.87895, 3.35085, 3.82275, 4.29464, 4.76654, 4.76157, 4.28967, 3.81778, 3.34588, 2.87399, 2.40209, 1.9302, 1.4583, 0.98641, 0.51451, 0.04261, -0.42928, -0.90118, -1.37307, -1.84497, -2.31686, -2.41124, -1.93935, -1.46745, -0.99556, -0.52366, -0.05176, 0.42013, 0.89203, 1.36392, 1.83582, 2.30771, 2.77961, 3.2515, 3.7234, 4.19529, 4.66719, 4.86092, 4.38902, 3.91712, 3.44523, 2.97333],
)
    quantize(L) = x -> L[argmin(abs.(x .- L))]
    N = 5
    L = range(start = a, stop = b, length = 2 ^ N)

    q = quantize(L)
    x_q = q.(x)
    e = x - x_q
    rms = sqrt(sum(abs.(e) .^ 2) / length(e))
    return rms
end

# 0.07288866395547805
rozwiazanie3()

# problem 10
# energia sygnału błędu kwantyzacji          
function rozwiazanie10(;
    a::Float64 = 0.0056,
    b::Float64 = 1.0,
    x::Vector{Float64} = [0.56847, 0.74211, 0.37596, 0.9346, 0.08945, 0.00563, 0.57125, 0.75471, 0.16204, 0.38112, 0.95479, 0.6514, 0.55112, 0.35259, 0.69607, 0.16842, 0.96484, 0.28371, 0.67609, 0.06089, 0.15291, 0.47616, 0.88706, 0.02472, 0.71574, 0.99689, 0.13549, 0.45939, 0.72669, 0.12584, 0.68082, 0.49304, 0.39996, 0.70337, 0.54443, 0.80433, 0.69674, 0.86164, 0.72668, 0.80791, 0.12616, 0.75179, 0.57159, 0.11995, 0.71875, 0.27166, 0.04843, 0.46238, 0.68282, 0.3623, 0.66588, 0.80024, 0.97114, 0.9802, 0.77712, 0.82037, 0.50873, 0.96565, 0.96343, 0.95378, 0.4523, 0.81601, 0.53997, 0.07107, 0.15579, 0.96985, 0.98929, 0.21106, 0.0927, 0.89756, 0.77855, 0.91343, 0.30874, 0.52587, 0.08481, 0.11552, 0.7191],
)
    quantize(L) = x -> L[argmin(abs.(x .- L))]
    N = 6
    L = range(start = a, stop = b, length = 2 ^ N)

    q = quantize(L)
    x_q = q.(x)
    e = x - x_q
    energy = sum(abs.(e) .^ 2)
    return energy
end

# 0.0013891007856890864
rozwiazanie10()

# problem 14
# energia sygnału błędu kwantyzacji          
function rozwiazanie14(;
    a::Float64 = -5.7,
    b::Float64 = 2.1,
    x::Vector{Float64} = [-3.34, -3.73048, -4.12095, -4.51143, -4.9019, -5.29238, -5.68286, 2.12667, 1.73619, 1.34571, 0.95524, 0.56476, 0.17429, -0.21619, -0.60667, -0.99714, -1.38762, -1.7781, -2.16857, -2.55905, -2.94952, -3.34, -3.73048, -4.12095, -4.51143, -4.9019, -5.29238, -5.68286, 2.12667, 1.73619, 1.34571, 0.95524, 0.56476, 0.17429, -0.21619, -0.60667, -0.99714, -1.38762, -1.7781, -2.16857, -2.55905, -2.94952, -3.34, -3.73048, -4.12095, -4.51143, -4.9019, -5.29238, -5.68286, 2.12667, 1.73619, 1.34571, 0.95524, 0.56476, 0.17429, -0.21619, -0.60667, -0.99714, -1.38762, -1.7781, -2.16857, -2.55905, -2.94952, -3.34, -3.73048, -4.12095, -4.51143, -4.9019, -5.29238, -5.68286, 2.12667, 1.73619, 1.34571, 0.95524, 0.56476, 0.17429, -0.21619, -0.60667, -0.99714, -1.38762],
)
    quantize(L) = x -> L[argmin(abs.(x .- L))]
    N = 6
    L = range(start = a, stop = b, length = 2 ^ N)

    q = quantize(L)
    x_q = q.(x)
    e = x - x_q
    energy = sum(abs.(e) .^ 2)
    return energy
end

# 0.09408306822721064
rozwiazanie14()

# problem 16
# moc sygnału błędu kwantyzacji          
function rozwiazanie16(;
    a::Float64 = -5.6,
    b::Float64 = 0.79,
    x::Vector{Float64} = [0.032, -0.60492, -1.24184, -1.87875, -2.51567, -3.15259, -3.78951, -4.42643, -5.06335, -5.49974, -4.86282, -4.2259, -3.58898, -2.95206, -2.31515, -1.67823, -1.04131, -0.40439, 0.23253, 0.73056, 0.09364, -0.54328, -1.1802, -1.81712, -2.45404, -3.09095, -3.72787, -4.36479, -5.00171, -5.56137, -4.92446, -4.28754, -3.65062, -3.0137, -2.37678, -1.73987, -1.10295, -0.46603, 0.17089, 0.79219, 0.15527, -0.48164, -1.11856, -1.75548, -2.3924, -3.02932, -3.66623, -4.30315, -4.94007, -5.57699, -4.98609, -4.34917, -3.71226, -3.07534, -2.43842, -1.8015, -1.16458, -0.52767, 0.10925, 0.74617, 0.21691, -0.42001, -1.05692, -1.69384, -2.33076, -2.96768, -3.6046, -4.24152, -4.87843, -5.51535, -5.04773, -4.41081, -3.77389, -3.13698, -2.50006, -1.86314, -1.22622, -0.5893, 0.04761, 0.68453, 0.27855, -0.35837, -0.99529, -1.63221, -2.26912, -2.90604, -3.54296, -4.17988, -4.8168, -5.45371, -5.10937, -4.47245, -3.83553, -3.19861, -2.5617, -1.92478],
)
    quantize(L) = x -> L[argmin(abs.(x .- L))]
    N = 3
    L = range(start = a, stop = b, length = 2 ^ N)

    q = quantize(L)
    x_q = q.(x)
    e = x - x_q
    power = sum(abs.(e) .^ 2) / length(e)
    return power
end

# 0.06922925353947704
rozwiazanie16()

# problem 26
# wartość skuteczna sygnału błędu kwantyzacji          
function rozwiazanie26(;
    a::Float64 = -4.4,
    b::Float64 = 4.2,
    x::Vector{Float64} = [0.78, 0.24151, -0.29697, -0.83546, -1.37395, -1.91243, -2.45092, -2.9894, -3.52789, -4.06638, 4.19514, 3.65665, 3.11816, 2.57968, 2.04119, 1.50271, 0.96422, 0.42573, -0.11275, -0.65124, -1.18973, -1.72821, -2.2667, -2.80519, -3.34367, -3.88216, -4.42064, 3.84087, 3.30238, 2.7639, 2.22541, 1.68692, 1.14844, 0.60995, 0.07147, -0.46702, -1.00551, -1.54399, -2.08248, -2.62097, -3.15945, -3.69794, -4.23643, 4.02509, 3.4866, 2.94812, 2.40963, 1.87114, 1.33266, 0.79417, 0.25568, -0.2828],
)
    quantize(L) = x -> L[argmin(abs.(x .- L))]
    N = 6
    L = range(start = a, stop = b, length = 2 ^ N)

    q = quantize(L)
    x_q = q.(x)
    e = x - x_q
    rms = sqrt(sum(abs.(e) .^ 2) / length(e))
    return rms
end

# 0.0363073307213214
rozwiazanie26()

# problem 32
# wartość skuteczna sygnału błędu kwantyzacji          
function rozwiazanie32(;
    a::Float64 = 0.016,
    b::Float64 = 0.98,
    x::Vector{Float64} = [0.94862, 0.0241, 0.07861, 0.1851, 0.94997, 0.12357, 0.37632, 0.46596, 0.81761, 0.61411, 0.53581, 0.71855, 0.21184, 0.25854, 0.11878, 0.35106, 0.41106, 0.57201, 0.3064, 0.5018, 0.78848, 0.79263, 0.28096, 0.52367, 0.20863, 0.51147, 0.33711, 0.22929, 0.9605, 0.08728, 0.75651, 0.03799, 0.96973, 0.12431, 0.39234, 0.47093, 0.89223, 0.66858, 0.24805, 0.32817, 0.11595, 0.88675, 0.53843, 0.36247, 0.61832, 0.75149, 0.67319, 0.11964, 0.65864, 0.1502, 0.87146, 0.15946, 0.08376, 0.10753, 0.29461, 0.59939, 0.40131, 0.41222, 0.70343, 0.97864, 0.94813, 0.64549, 0.6861, 0.41727, 0.15312, 0.93553, 0.93197, 0.38447, 0.79489, 0.44495, 0.70823, 0.54983, 0.31198, 0.68062, 0.75205, 0.04621, 0.08287, 0.55077, 0.31136, 0.43562, 0.50655, 0.82521, 0.89177, 0.18876, 0.10781, 0.49479, 0.01551, 0.50157, 0.39033, 0.59818],
)
    quantize(L) = x -> L[argmin(abs.(x .- L))]
    N = 7
    L = range(start = a, stop = b, length = 2 ^ N)

    q = quantize(L)
    x_q = q.(x)
    e = x - x_q
    rms = sqrt(sum(abs.(e) .^ 2) / length(e))
    return rms
end

# 0.002120250113616833
rozwiazanie32()

# problem 40
# energia sygnału błędu kwantyzacji          
function rozwiazanie40(;
    a::Float64 = -1.5,
    b::Float64 = 0.49,
    x::Vector{Float64} = [-1.38, -1.33645, -1.29291, -1.24936, -1.20582, -1.16227, -1.11872, -1.07518, -1.03163, -0.98809, -0.94454, -0.901, -0.85745, -0.8139, -0.77036, -0.72681, -0.68327, -0.63972, -0.59617, -0.55263, -0.50908, -0.46554, -0.42199, -0.37844, -0.3349, -0.29135, -0.24781, -0.20426, -0.16072, -0.11717, -0.07362, -0.03008, 0.01347, 0.05701, 0.10056, 0.14411, 0.18765, 0.2312, 0.27474, 0.31829, 0.36184, 0.40538, 0.44893, 0.49247, -1.46398, -1.42044, -1.37689, -1.33334, -1.2898, -1.24625, -1.20271, -1.15916, -1.11561, -1.07207, -1.02852, -0.98498, -0.94143, -0.89788, -0.85434, -0.81079, -0.76725, -0.7237, -0.68016, -0.63661, -0.59306, -0.54952, -0.50597, -0.46243, -0.41888, -0.37533, -0.33179, -0.28824],
)
    quantize(L) = x -> L[argmin(abs.(x .- L))]
    N = 8
    L = range(start = a, stop = b, length = 2 ^ N)

    q = quantize(L)
    x_q = q.(x)
    e = x - x_q
    energy = sum(abs.(e) .^ 2)
    return energy
end

# 0.00036927409711649383
rozwiazanie40()

# problem 41
# moc sygnału błędu kwantyzacji          
function rozwiazanie41(;
    a::Float64 = 0.012,
    b::Float64 = 1.0,
    x::Vector{Float64} = [0.13305, 0.98145, 0.37559, 0.31889, 0.84739, 0.02241, 0.49414, 0.19375, 0.03932, 0.03012, 0.5985, 0.99967, 0.99355, 0.37716, 0.9379, 0.39295, 0.10757, 0.99736, 0.86859, 0.14917, 0.28943, 0.54582, 0.05613, 0.28957, 0.11021, 0.06435, 0.45682, 0.21672, 0.7949, 0.94166, 0.38783, 0.31799, 0.47476, 0.7604, 0.53043, 0.42237, 0.128, 0.82555, 0.97188, 0.67314, 0.68017, 0.16836, 0.54768, 0.98845, 0.50107, 0.04717, 0.16646, 0.60658, 0.97931, 0.38437, 0.6112, 0.92558, 0.06762, 0.15936, 0.47644, 0.17024, 0.60476, 0.46096, 0.72281, 0.01185],
)
    quantize(L) = x -> L[argmin(abs.(x .- L))]
    N = 9
    L = range(start = a, stop = b, length = 2 ^ N)

    q = quantize(L)
    x_q = q.(x)
    e = x - x_q
    power = sum(abs.(e) .^ 2) / length(e)
    return power
end

# 2.624699320685337e-7
rozwiazanie41()

# problem 49
# moc sygnału błedu kwantyzacji          
function rozwiazanie49(;
    a::Float64 = 0.021,
    b::Float64 = 0.99,
    x::Vector{Float64} = [0.31478, 0.96097, 0.97959, 0.66441, 0.97322, 0.7135, 0.14041, 0.24413, 0.59412, 0.31528, 0.60902, 0.45662, 0.85402, 0.46451, 0.37761, 0.55675, 0.49765, 0.10961, 0.82894, 0.08407, 0.95857, 0.22905, 0.19377, 0.64798, 0.63444, 0.85524, 0.21919, 0.33226, 0.78408, 0.5335, 0.74721, 0.12977, 0.83386, 0.19102, 0.95344, 0.16902, 0.75175, 0.44025, 0.15734, 0.26082, 0.35397, 0.12863, 0.80186, 0.55723, 0.84407, 0.66684, 0.1977, 0.87355, 0.26783, 0.38493, 0.21721, 0.38294, 0.89305, 0.3254, 0.81564, 0.50959, 0.3485, 0.29427, 0.39729, 0.94902, 0.12241, 0.02059, 0.65497, 0.70429, 0.98592, 0.43786, 0.49308, 0.02289, 0.91189, 0.11579, 0.28244, 0.67126, 0.24845, 0.2196, 0.86268, 0.28575, 0.63358, 0.38597, 0.41429, 0.57413, 0.13158, 0.95998, 0.53281, 0.34844, 0.89252, 0.12917],
)
    quantize(L) = x -> L[argmin(abs.(x .- L))]
    N = 4
    L = range(start = a, stop = b, length = 2 ^ N)

    q = quantize(L)
    x_q = q.(x)
    e = x - x_q
    power = sum(abs.(e) .^ 2) / length(e)
    return power
end

# 0.0003858745313953487
rozwiazanie49()

# problem 51
# moc sygnału błędu kwantyzacji          
function rozwiazanie51(;
    a::Float64 = -3.0,
    b::Float64 = 0.62,
    x::Vector{Float64} = [-0.49063, -0.2577, -0.01639, 0.23695, 0.52694, -3.0098, -2.68239, -2.43058, -2.19356, -1.96438, -1.73844, -1.51148, -1.28036, -1.0439, -0.80327, -0.56154, -0.32274, -0.09074, 0.13078, 0.33144, -1.34031, -2.73713, -2.53414, -2.30958, -2.07477, -1.8342, -1.59216, -1.35254, -1.1178, -0.88821, -0.66177, -0.43486, -0.2033, 0.03698, 0.29223, 0.62464, -2.91867, -2.62845, -2.37735, -2.13888, -1.90831, -1.68169, -1.4549, -1.22451, -0.98886, -0.74858, -0.50642, -0.26641, -0.03295, 0.18889, 0.37972, -2.76819, -2.68394, -2.47595, -2.25208, -2.01872, -1.77921, -1.53746, -1.29737, -1.0618, -0.83154],
)
    quantize(L) = x -> L[argmin(abs.(x .- L))]
    N = 8
    L = range(start = a, stop = b, length = 2 ^ N)

    q = quantize(L)
    x_q = q.(x)
    e = x - x_q
    power = sum(abs.(e) .^ 2) / length(e)
    return power
end

# 1.426723164986971e-5
rozwiazanie51()

# problem 55
# moc sygnału błędu kwantyzacji          
function rozwiazanie55(;
    a::Float64 = -4.7,
    b::Float64 = 2.0,
    x::Vector{Float64} = [-3.1, -2.62113, -2.14225, -1.66338, -1.18451, -0.70563, -0.22676, 0.25211, 0.73099, 1.20986, 1.68873, -4.63239, -4.15352, -3.67465, -3.19577, -2.7169, -2.23803, -1.75915, -1.28028, -0.80141, -0.32254, 0.15634, 0.63521, 1.11408, 1.59296, -4.72817, -4.2493, -3.77042, -3.29155, -2.81268, -2.3338, -1.85493, -1.37606, -0.89718, -0.41831, 0.06056, 0.53944, 1.01831, 1.49718, 1.97606, -4.34507, -3.8662, -3.38732, -2.90845, -2.42958, -1.9507, -1.47183, -0.99296, -0.51408, -0.03521, 0.44366, 0.92254, 1.40141, 1.88028, -4.44085, -3.96197, -3.4831, -3.00423, -2.52535, -2.04648, -1.56761, -1.08873, -0.60986, -0.13099, 0.34789, 0.82676, 1.30563, 1.78451, -4.53662, -4.05775, -3.57887, -3.1, -2.62113, -2.14225, -1.66338, -1.18451, -0.70563, -0.22676, 0.25211, 0.73099, 1.20986, 1.68873, -4.63239, -4.15352, -3.67465, -3.19577, -2.7169, -2.23803, -1.75915, -1.28028, -0.80141, -0.32254, 0.15634, 0.63521, 1.11408, 1.59296, -4.72817, -4.2493, -3.77042, -3.29155],
)
    quantize(L) = x -> L[argmin(abs.(x .- L))]
    N = 5
    L = range(start = a, stop = b, length = 2 ^ N)

    q = quantize(L)
    x_q = q.(x)
    e = x - x_q
    power = sum(abs.(e) .^ 2) / length(e)
    return power
end

# 0.00394438597065557
rozwiazanie55()

# problem 63
# energia sygnału błędu kwantyzacji          
function rozwiazanie63(;
    a::Float64 = -3.8,
    b::Float64 = -0.37,
    x::Vector{Float64} = [-1.32078, -1.13615, -0.94457, -0.72221, -3.62155, -3.35868, -3.13766, -2.93122, -2.73708, -2.54887, -2.35833, -2.1605, -1.95672, -1.75329, -1.55661, -1.36812, -1.18233, -0.9887, -0.7696, -3.82182, -3.40959, -3.18358, -2.97715, -2.78391, -2.59618, -2.40546, -2.20717, -2.00323, -1.80014, -1.60395, -1.41542, -1.22861, -1.03341, -0.81657, -0.37487, -3.46276, -3.22929, -3.02296, -2.83073, -2.64352, -2.4526, -2.25385, -2.04975, -1.84699, -1.65126, -1.46268, -1.27496, -1.07853, -0.86342, -0.5782, -3.52087, -3.27468, -3.06859, -2.87755, -2.69089, -2.49975, -2.30052, -2.09627, -1.89384, -1.69855, -1.50992, -1.32137, -1.12394, -0.91024, -0.66142, -3.59341, -3.31962, -3.11401, -2.92436, -2.73829, -2.54691, -2.34719, -2.14279, -1.94069],
)
    quantize(L) = x -> L[argmin(abs.(x .- L))]
    N = 10
    L = range(start = a, stop = b, length = 2 ^ N)

    q = quantize(L)
    x_q = q.(x)
    e = x - x_q
    energy = sum(abs.(e) .^ 2)
    return energy
end

# 0.0005333737806627571
rozwiazanie63()

# problem 64
# energia sygnału błędu kwantyzacji          
function rozwiazanie64(;
    a::Float64 = 0.0096,
    b::Float64 = 3.9,
    x::Vector{Float64} = [2.54, 2.70613, 2.87227, 3.0384, 3.20454, 3.37067, 3.53681, 3.70294, 3.86907, 0.03521, 0.20134, 0.36748, 0.53361, 0.69974, 0.86588, 1.03201, 1.19815, 1.36428, 1.53042, 1.69655, 1.86268, 2.02882, 2.19495, 2.36109, 2.52722, 2.69335, 2.85949, 3.02562, 3.19176, 3.35789, 3.52403, 3.69016, 3.85629, 0.02243, 0.18856, 0.3547, 0.52083, 0.68696, 0.8531, 1.01923, 1.18537, 1.3515, 1.51764, 1.68377, 1.8499, 2.01604, 2.18217, 2.34831, 2.51444, 2.68058, 2.84671, 3.01284, 3.17898, 3.34511, 3.51125, 3.67738, 3.84351, 0.00965, 0.17578, 0.34192, 0.50805, 0.67419, 0.84032, 1.00645, 1.17259, 1.33872, 1.50486, 1.67099, 1.83712, 2.00326, 2.16939, 2.33553, 2.50166, 2.6678, 2.83393],
)
    quantize(L) = x -> L[argmin(abs.(x .- L))]
    N = 8
    L = range(start = a, stop = b, length = 2 ^ N)

    q = quantize(L)
    x_q = q.(x)
    e = x - x_q
    energy = sum(abs.(e) .^ 2)
    return energy
end

# 0.0015514248584775174
rozwiazanie64()

# problem 68
# moc sygnału błędu kwantyzacji          
function rozwiazanie68(;
    a::Float64 = 0.49,
    b::Float64 = 1.9,
    x::Vector{Float64} = [1.33889, 1.44135, 1.54655, 1.65589, 1.77022, 1.90888, 0.56767, 0.68268, 0.7875, 0.889, 0.99035, 1.09384, 1.20023, 1.30854, 1.41658, 1.52211, 1.62381, 1.72151, 1.81128, 0.54803, 0.6376, 0.74301, 0.8521, 0.96144, 1.06867, 1.17296, 1.2752, 1.3775, 1.48213, 1.59035, 1.702, 1.81721, 0.49367, 0.61957, 0.72466, 0.82577, 0.92656, 1.02944, 1.13533, 1.24341, 1.3516, 1.45765, 1.56031, 1.65987, 1.75752, 1.83887, 0.57092, 0.67664, 0.78632, 0.89632, 1.00421, 1.10901],
)
    quantize(L) = x -> L[argmin(abs.(x .- L))]
    N = 6
    L = range(start = a, stop = b, length = 2 ^ N)

    q = quantize(L)
    x_q = q.(x)
    e = x - x_q
    power = sum(abs.(e) .^ 2) / length(e)
    return power
end

# 4.3609974180184873e-5
rozwiazanie68()

# problem 77
# moc sygnału błędu kwantyzacji          
function rozwiazanie77(;
    a::Float64 = -4.1,
    b::Float64 = 4.9,
    x::Vector{Float64} = [-1.04, -1.34091, -1.64182, -1.94274, -2.24365, -2.54456, -2.84547, -3.14638, -3.44729, -3.74821, -4.04912, -3.84997, -3.54906, -3.24815, -2.94723, -2.64632, -2.34541, -2.0445, -1.74359, -1.44267, -1.14176, -0.84085, -0.53994, -0.23903, 0.06188, 0.3628, 0.66371, 0.96462, 1.26553, 1.56644, 1.86736, 2.16827, 2.46918, 2.77009, 3.071, 3.37191, 3.67283, 3.97374, 4.27465, 4.57556, 4.87647, 4.62261, 4.3217, 4.02079, 3.71988, 3.41897, 3.11805, 2.81714, 2.51623, 2.21532, 1.91441, 1.6135, 1.31258, 1.01167, 0.71076, 0.40985, 0.10894, -0.19198, -0.49289, -0.7938, -1.09471, -1.39562, -1.69653, -1.99745, -2.29836, -2.59927, -2.90018, -3.20109, -3.50201, -3.80292, -4.09617, -3.79526, -3.49435, -3.19343, -2.89252, -2.59161, -2.2907, -1.98979, -1.68888, -1.38796, -1.08705, -0.78614, -0.48523, -0.18432],
)
    quantize(L) = x -> L[argmin(abs.(x .- L))]
    N = 8
    L = range(start = a, stop = b, length = 2 ^ N)

    q = quantize(L)
    x_q = q.(x)
    e = x - x_q
    power = sum(abs.(e) .^ 2) / length(e)
    return power
end

# 0.00010290727389602889
rozwiazanie77()